# Generated by Django 2.1.2 on 2019-04-16 07:40

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('DataEntrySystem', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='accounting_treatment',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('reward_not_deducted_from_net_profit_realized_amount_flag', models.BooleanField(default=False)),
                ('net_profit_not_affected_actual_accounting_treatment_flag', models.BooleanField(default=False)),
                ('incentive_amount_deducted_from_personal_income_tax_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'accounting_treatment',
            },
        ),
        migrations.CreateModel(
            name='arrangement_commitment_performance_computing_criteria',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('deduction_items_type', models.TextField(blank=True, null=True)),
                ('realized_in_current_period_can_be_included_in_next_period', models.TextField(blank=True, null=True)),
                ('financial_statements_basfor_preparation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'arrangement_commitment_performance_computing_criteria',
            },
        ),
        migrations.CreateModel(
            name='arrangement_committed_performance_commitment_to_net_profit',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('first_year_commitment_to_net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('second_year_commitment_net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_commitment_net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fourth_year_commitment_net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('accumulated_commitment_net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'arrangement_committed_performance_commitment_to_net_profit',
            },
        ),
        migrations.CreateModel(
            name='arrangement_committed_performance_committed_inventory',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('recovery_time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'arrangement_committed_performance_committed_inventory',
            },
        ),
        migrations.CreateModel(
            name='arrangement_compensation_mode_cash_compensation_implementation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('compensatory_obligor_status', models.TextField(blank=True, null=True)),
                ('direct_cash_compensation_flag', models.BooleanField(default=False)),
                ('cash_compensation_opening_special_account_flag', models.BooleanField(default=False)),
                ('agreements_with_listed_companies_commercial_banks_flag', models.BooleanField(default=False)),
                ('companies_to_determine_amount_impairment_compensation_time', models.TextField(blank=True, null=True)),
                ('process_determining_amount_of_impairment_compensation', models.TextField(blank=True, null=True)),
                ('performance_compensation_obligation_time_limit', models.TextField(blank=True, null=True)),
                ('performing_compensation_obligation_way', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'arrangement_compensation_mode_cash_compensation_implementation',
            },
        ),
        migrations.CreateModel(
            name='assessment_index',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('assessment_indicators_types', models.TextField(blank=True, null=True)),
                ('evaluation_indicator_calculation_formula', models.TextField(blank=True, null=True)),
                ('deduction_items_type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assessment_index',
            },
        ),
        migrations.CreateModel(
            name='assets_appraisal_basic_data',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('assessment_method', models.TextField(blank=True, null=True)),
                ('assessment_baseline_date', models.DateField(blank=True, null=True)),
                ('supplementary_assessment_baseline_date', models.DateField(blank=True, null=True)),
                ('book_net_assets', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('assessment_results', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('evaluation_increment', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('appreciation_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('applying_methods_to_evaluate_results', models.TextField(blank=True, null=True)),
                ('transaction_price', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('transaction_value_added_rate', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assets_appraisal_basic_data',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_assets_delivery_limited_company',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('underlying_assets_name', models.TextField(blank=True, null=True)),
                ('director_supervisor_seniorstock_delivery_time', models.TextField(blank=True, null=True)),
                ('shareholder_controller_stock_delivery_time', models.TextField(blank=True, null=True)),
                ('other_shareholders_tock_delivery_times', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'basic_plan_assets_delivery_limited_company',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_assets_delivery_limited_company_listed_companies',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('underlying_assets_name', models.TextField(blank=True, null=True)),
                ('share_company_setup_time', models.DateField(blank=True, null=True)),
                ('listing_place', models.TextField(blank=True, null=True)),
                ('listing_time', models.DateField(blank=True, null=True)),
                ('shareholder_limitation_arrangement', models.TextField(blank=True, null=True)),
                ('listing_termination_flag', models.BooleanField(default=False)),
                ('delisting_time', models.TextField(blank=True, null=True)),
                ('change_share_company_to_limited_company_time', models.TextField(blank=True, null=True)),
                ('shareholder_controller_stock_delivery_time', models.TextField(blank=True, null=True)),
                ('director_supervisor_seniorstock_transfer_time', models.TextField(blank=True, null=True)),
                ('other_shareholders_tock_transfer_times', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'basic_plan_assets_delivery_limited_company_listed_companies',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_assets_delivery_limited_company_unlisted_companies',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('underlying_assets_name', models.TextField(blank=True, null=True)),
                ('share_company_setup_time', models.DateField(blank=True, null=True)),
                ('shareholder_limitation_arrangement', models.TextField(blank=True, null=True)),
                ('change_share_company_to_limited_company_time', models.TextField(blank=True, null=True)),
                ('shareholder_controller_stock_delivery_time', models.TextField(blank=True, null=True)),
                ('director_supervisor_seniorstock_transfer_time', models.TextField(blank=True, null=True)),
                ('other_shareholders_tock_transfer_times', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'basic_plan_assets_delivery_limited_company_unlisted_companies',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_contingent_liability',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('debt_scope', models.TextField(blank=True, null=True)),
                ('subject_name', models.TextField(blank=True, null=True)),
                ('subject_identity', models.TextField(blank=True, null=True)),
                ('prorated_commitment_flag', models.BooleanField(default=False)),
                ('joint_several_liability_flag', models.BooleanField(default=False)),
                ('joint_several_liability_subject', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'basic_plan_contingent_liability',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_essential_information',
            fields=[
                ('used_flag', models.BooleanField(default=False)),
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('listed_companies_abbreviation', models.TextField(blank=True, null=True)),
                ('listing_place', models.TextField(blank=True, null=True)),
                ('listed_companies_securities_code', models.TextField(blank=True, null=True)),
                ('listed_companies', models.TextField(blank=True, null=True)),
                ('listed_companies_main_business', models.TextField(blank=True, null=True)),
                ('target_company', models.TextField(blank=True, null=True)),
                ('transacted_assets_to_target_company_stock_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('target_company_inc', models.TextField(blank=True, null=True)),
                ('target_company_main_business', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'basic_plan_essential_information',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_integration_corporate_governance_arrangements',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('board_of_directors_composition', models.TextField(blank=True, null=True)),
                ('board_of_supervisors_composition', models.TextField(blank=True, null=True)),
                ('legal_representative', models.TextField(blank=True, null=True)),
                ('chairman', models.TextField(blank=True, null=True)),
                ('board_resolution_procedure', models.TextField(blank=True, null=True)),
                ('resolution_major_matters_procedures', models.TextField(blank=True, null=True)),
                ('senior', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'basic_plan_integration_corporate_governance_arrangements',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_payment',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('cash_flag', models.BooleanField(default=False)),
                ('cash_ratio', models.TextField(blank=True, null=True)),
                ('share_flag', models.BooleanField(default=False)),
                ('share_ratio', models.TextField(blank=True, null=True)),
                ('convertible_bonds_flag', models.BooleanField(default=False)),
                ('convertible_bond_ratio', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'basic_plan_payment',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_transaction_type',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('constituting_major_asset_restructuring_flag', models.BooleanField(default=False)),
                ('for_affiliated_transactions_flag', models.BooleanField(default=False)),
                ('listed_companies_enough_to_change_control_rights_flag', models.BooleanField(default=False)),
                ('asset_replacement_flag', models.BooleanField(default=False)),
                ('cash_purchase_assets_flag', models.BooleanField(default=False)),
                ('issuing_share_to_purchase_assets_flag', models.BooleanField(default=False)),
                ('assets_sale_flag', models.BooleanField(default=False)),
                ('absorption_merger_flag', models.BooleanField(default=False)),
                ('discrete_flag', models.BooleanField(default=False)),
                ('listed_companies_acquisition_flag', models.BooleanField(default=False)),
                ('tender_offer_flag', models.BooleanField(default=False)),
                ('raising_matching_funds_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'basic_plan_transaction_type',
            },
        ),
        migrations.CreateModel(
            name='basic_plan_transition_arrangement',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('transition_time', models.TextField(blank=True, null=True)),
                ('target_company_dividend_in_transition_flag', models.BooleanField(default=False)),
                ('bonus_method', models.TextField(blank=True, null=True)),
                ('transition_profit_attribution', models.TextField(blank=True, null=True)),
                ('transition_loss_attribution', models.TextField(blank=True, null=True)),
                ('transition_losses_are_borne_proportionally_flag', models.BooleanField(default=False)),
                ('transition_losses_joint_several_liability_flag', models.BooleanField(default=False)),
                ('transition_gains_losses_audit_time', models.TextField(blank=True, null=True)),
                ('other_transition_arrangements', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'basic_plan_transition_arrangement',
            },
        ),
        migrations.CreateModel(
            name='breach_contract_liability',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('breach_of_contract_subject', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('contract_breach', models.TextField(blank=True, null=True)),
                ('default_type', models.TextField(blank=True, null=True)),
                ('liquidated_damages_calculating_method', models.TextField(blank=True, null=True)),
                ('each_subject_joint_several_liabilities_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'breach_contract_liability',
            },
        ),
        migrations.CreateModel(
            name='cash_payment_earnest_money',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_object', models.TextField(blank=True, null=True)),
                ('payment_object_identity', models.TextField(blank=True, null=True)),
                ('deposit_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('deposit_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('payment_time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cash_payment_earnest_money',
            },
        ),
        migrations.CreateModel(
            name='commitment_net_profit_operational_cash_flow_contract_amount',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('share_compensation_flag', models.BooleanField(default=False)),
                ('cash_compensation_flag', models.BooleanField(default=False)),
                ('share_or_cash_compensation_flag', models.BooleanField(default=False)),
                ('other_assets_recognized_by_listed_companies_compensation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'commitment_net_profit_operational_cash_flow_contract_amount',
            },
        ),
        migrations.CreateModel(
            name='committed_performance_commitment_to_accounts_receivable',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('recovery_time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'committed_performance_commitment_to_accounts_receivable',
            },
        ),
        migrations.CreateModel(
            name='committed_performance_commitment_to_long_term_receivables',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('recovery_time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'committed_performance_commitment_to_long_term_receivables',
            },
        ),
        migrations.CreateModel(
            name='committed_performance_commitment_to_net_operating_cash_flow',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('net_operating_cash_flow_promised_in_first_year', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('second_year_net_operating_cash_flow_promised', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_net_operating_cash_flow_promised', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fourth_year_net_operating_cash_flow_promised', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('accumulated_net_operating_cash_flow_commitment', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'committed_performance_commitment_to_net_operating_cash_flow',
            },
        ),
        migrations.CreateModel(
            name='committed_performance_commitment_to_sign_contract_amount',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('contract_promised_in_first_year_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('contract_promised_in_second_year_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('contract_promised_in_third_year_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('contract_promised_in_fourth_year_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('accumulative_undertaking_to_sign_contract', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'committed_performance_commitment_to_sign_contract_amount',
            },
        ),
        migrations.CreateModel(
            name='committed_performance_committed_inventory_recovery_rate',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('first_year_commitment_inventory_recovery_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('second_year_commitment_inventory_recovery_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_commitment_inventory_recovery_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fourth_year_commitment_inventory_recovery_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'committed_performance_committed_inventory_recovery_rate',
            },
        ),
        migrations.CreateModel(
            name='committed_performance_committed_inventory_turnover_rate',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('first_year_commitment_inventory_turnover_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('second_year_commitment_inventory_turnover_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_commitment_inventory_turnover_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fourth_year_commitment_inventory_turnover_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'committed_performance_committed_inventory_turnover_rate',
            },
        ),
        migrations.CreateModel(
            name='compensation_implementation_cash_compensation_special_account',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('compensatory_obligor_status', models.TextField(blank=True, null=True)),
                ('attention_of_listed_companies_duty', models.TextField(blank=True, null=True)),
                ('funs_restrictions_on_use', models.TextField(blank=True, null=True)),
                ('funs_rights_restriction', models.TextField(blank=True, null=True)),
                ('funs_transition_condition', models.TextField(blank=True, null=True)),
                ('funs_roll_out_restriction', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compensation_implementation_cash_compensation_special_account',
            },
        ),
        migrations.CreateModel(
            name='compensation_mode_share_compensation_implementation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('compensatory_obligor_status', models.TextField(blank=True, null=True)),
                ('share_compensation_operation_arrangement', models.TextField(blank=True, null=True)),
                ('companies_share_repurchase_write_off_scheme_review_process', models.TextField(blank=True, null=True)),
                ('compensation_obligator_share_transfer', models.TextField(blank=True, null=True)),
                ('share_cancellation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compensation_mode_share_compensation_implementation',
            },
        ),
        migrations.CreateModel(
            name='forecast_compensation_compensation_mode_accounts_receivable',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('cash_compensation_flag', models.BooleanField(default=False)),
                ('cash_compensation_trigger_conditions', models.TextField(blank=True, null=True)),
                ('cash_compensation_ceiling', models.TextField(blank=True, null=True)),
                ('in_target_company_compensation_according_to_proportion_flag', models.BooleanField(default=False)),
                ('in_proportion_to_shareholding_in_listed_companies_flag', models.BooleanField(default=False)),
                ('compensation_compensation_in_other_proportions', models.TextField(blank=True, null=True)),
                ('joint_several_compensation_flag', models.BooleanField(default=False)),
                ('supplementary_compensation_flag', models.BooleanField(default=False)),
                ('calculating_amount_of_compensable_cash_method', models.TextField(blank=True, null=True)),
                ('compensable_cash_amount_adjustment', models.TextField(blank=True, null=True)),
                ('other_assets_recognized_by_listed_companies_compensation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'forecast_compensation_compensation_mode_accounts_receivable',
            },
        ),
        migrations.CreateModel(
            name='forecast_compensation_compensation_mode_committed_inventory',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('cash_compensation_flag', models.BooleanField(default=False)),
                ('cash_compensation_trigger_conditions', models.TextField(blank=True, null=True)),
                ('cash_compensation_ceiling', models.TextField(blank=True, null=True)),
                ('in_target_company_compensation_according_to_proportion_flag', models.BooleanField(default=False)),
                ('in_proportion_to_shareholding_in_listed_companies_flag', models.BooleanField(default=False)),
                ('compensation_compensation_in_other_proportions', models.TextField(blank=True, null=True)),
                ('joint_several_compensation_flag', models.BooleanField(default=False)),
                ('supplementary_compensation_flag', models.BooleanField(default=False)),
                ('calculating_amount_of_compensable_cash_method', models.TextField(blank=True, null=True)),
                ('compensable_cash_amount_adjustment', models.TextField(blank=True, null=True)),
                ('other_assets_recognized_by_listed_companies_compensation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'forecast_compensation_compensation_mode_committed_inventory',
            },
        ),
        migrations.CreateModel(
            name='forecast_compensation_compensation_mode_long_term_receivables',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('cash_compensation_flag', models.BooleanField(default=False)),
                ('cash_compensation_trigger_conditions', models.TextField(blank=True, null=True)),
                ('cash_compensation_ceiling', models.TextField(blank=True, null=True)),
                ('in_target_company_compensation_according_to_proportion_flag', models.BooleanField(default=False)),
                ('in_proportion_to_shareholding_in_listed_companies_flag', models.BooleanField(default=False)),
                ('compensation_compensation_in_other_proportions', models.TextField(blank=True, null=True)),
                ('joint_several_compensation_flag', models.BooleanField(default=False)),
                ('supplementary_compensation_flag', models.BooleanField(default=False)),
                ('calculating_amount_of_compensable_cash_method', models.TextField(blank=True, null=True)),
                ('compensable_cash_amount_adjustment', models.TextField(blank=True, null=True)),
                ('other_assets_recognized_by_listed_companies_compensation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'forecast_compensation_compensation_mode_long_term_receivables',
            },
        ),
        migrations.CreateModel(
            name='forecast_guarantee_guarantee_mode_share_pledge_guarantee',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('pledgor', models.TextField(blank=True, null=True)),
                ('pledge_subject', models.TextField(blank=True, null=True)),
                ('pledge_subject_matter', models.TextField(blank=True, null=True)),
                ('pledge_subject_computation_method', models.TextField(blank=True, null=True)),
                ('pledgee', models.TextField(blank=True, null=True)),
                ('pledge_period', models.TextField(blank=True, null=True)),
                ('profits_during_pledge_period_distribution', models.TextField(blank=True, null=True)),
                ('pledge_lifting_relieving_conditions', models.TextField(blank=True, null=True)),
                ('pledge_lifting_relief_ratio', models.TextField(blank=True, null=True)),
                ('pledge_lifting_relieving_formalities', models.TextField(blank=True, null=True)),
                ('pledge_lifting_removable_share_quantity_adjustment', models.TextField(blank=True, null=True)),
                ('can_be_pledged_again_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'forecast_guarantee_guarantee_mode_share_pledge_guarantee',
            },
        ),
        migrations.CreateModel(
            name='impairment_test_compensation_conditions',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('during_profit_commitment_period_final_impairment_flag', models.BooleanField(default=False)),
                ('items_to_be_deducted_from_impairment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'impairment_test_compensation_conditions',
            },
        ),
        migrations.CreateModel(
            name='impairment_test_flow',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'impairment_test_flow',
            },
        ),
        migrations.CreateModel(
            name='impairment_test_time',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('profit_commitment_period_expiration', models.TextField(blank=True, null=True)),
                ('each_fiscal_year_end', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'impairment_test_time',
            },
        ),
        migrations.CreateModel(
            name='impairment_testing_compensation_arrangement_compensation_mode',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('compensatory_obligor_status', models.TextField(blank=True, null=True)),
                ('share_compensation_flag', models.BooleanField(default=False)),
                ('cash_compensation_flag', models.BooleanField(default=False)),
                ('share_compensation_priority_flag', models.BooleanField(default=False)),
                ('share_compensation_trigger_condition', models.TextField(blank=True, null=True)),
                ('cash_compensation_priority_flag', models.BooleanField(default=False)),
                ('cash_compensation_trigger_conditions', models.TextField(blank=True, null=True)),
                ('compensation_compensation_in_proportion_to_shareholding', models.TextField(blank=True, null=True)),
                ('compensation_compensation_in_other_proportions', models.TextField(blank=True, null=True)),
                ('compensation_share_number_calculating_method', models.TextField(blank=True, null=True)),
                ('calculating_amount_of_compensatory_cash_method', models.TextField(blank=True, null=True)),
                ('cash_compensation_proportional_commitment_flag', models.BooleanField(default=False)),
                ('compensation_each_party_undertakes_how_to_calculate_amount', models.TextField(blank=True, null=True)),
                ('cash_dividend_compensation_flag', models.BooleanField(default=False)),
                ('cash_dividend_calculation_period', models.TextField(blank=True, null=True)),
                ('compensation_obligation_joint_several_liability_flag', models.BooleanField(default=False)),
                ('compensation_implementation_time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'impairment_testing_compensation_arrangement_compensation_mode',
            },
        ),
        migrations.CreateModel(
            name='implementation_accounts_receivable_cash_compensation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('direct_cash_payment_flag', models.BooleanField(default=False)),
                ('cash_compensation_special_account_flag', models.BooleanField(default=False)),
                ('bond_flag', models.BooleanField(default=False)),
                ('other_assets_payment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'implementation_accounts_receivable_cash_compensation',
            },
        ),
        migrations.CreateModel(
            name='implementation_committed_inventory_cash_compensation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('direct_cash_payment_flag', models.BooleanField(default=False)),
                ('cash_compensation_special_account_flag', models.BooleanField(default=False)),
                ('bond_flag', models.BooleanField(default=False)),
                ('other_assets_payment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'implementation_committed_inventory_cash_compensation',
            },
        ),
        migrations.CreateModel(
            name='implementation_long_term_receivables_cash_compensation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('direct_cash_payment_flag', models.BooleanField(default=False)),
                ('cash_compensation_special_account_flag', models.BooleanField(default=False)),
                ('bond_flag', models.BooleanField(default=False)),
                ('other_assets_payment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'implementation_long_term_receivables_cash_compensation',
            },
        ),
        migrations.CreateModel(
            name='integration_financing_support',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('support_mode', models.TextField(blank=True, null=True)),
                ('support_amount', models.TextField(blank=True, null=True)),
                ('support_conditions', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'integration_financing_support',
            },
        ),
        migrations.CreateModel(
            name='integration_fiscal_taxation_arrangements',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('finance', models.TextField(blank=True, null=True)),
                ('taxation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'integration_fiscal_taxation_arrangements',
            },
        ),
        migrations.CreateModel(
            name='integration_labor_relations',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('labor_contract_term', models.TextField(blank=True, null=True)),
                ('prohibition_of_competition_term', models.TextField(blank=True, null=True)),
                ('non_competition_starting_time', models.TextField(blank=True, null=True)),
                ('non_competition_ending_time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'integration_labor_relations',
            },
        ),
        migrations.CreateModel(
            name='issuing_share_raising_matching_funds_basic_situation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('distribution_object_name', models.TextField(blank=True, null=True)),
                ('issuer_identity', models.TextField(blank=True, null=True)),
                ('raising_matching_funds', models.TextField(blank=True, null=True)),
                ('issue_quantity', models.TextField(blank=True, null=True)),
                ('pricing_date', models.TextField(blank=True, null=True)),
                ('issue_price', models.TextField(blank=True, null=True)),
                ('payment', models.TextField(blank=True, null=True)),
                ('issuing_mode', models.TextField(blank=True, null=True)),
                ('merger_acquisition_bottom_price_matching_financing', models.TextField(blank=True, null=True)),
                ('merger_acquisition_matching_financing_price', models.TextField(blank=True, null=True)),
                ('issuance_price_over_issuance_base_price_floating_rate', models.TextField(blank=True, null=True)),
                ('next_day_sfc_approves_closing_price', models.TextField(blank=True, null=True)),
                ('issuance_price_over_approved_next_day_discount_rate', models.TextField(blank=True, null=True)),
                ('date_of_securities_regulatory_commission_average_daily_price', models.TextField(blank=True, null=True)),
                ('sfc_issuance_price_two0_days_before_approval', models.TextField(blank=True, null=True)),
                ('share_lock_in_period', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'issuing_share_raising_matching_funds_basic_situation',
            },
        ),
        migrations.CreateModel(
            name='mode_impairment_compensation_share_quantity_adjustment',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('adjustment_situation', models.TextField(blank=True, null=True)),
                ('adjust_calculation_formula', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mode_impairment_compensation_share_quantity_adjustment',
            },
        ),
        migrations.CreateModel(
            name='operational_cash_flow_contract_amount_share_compensation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('share_compensation_trigger_condition', models.TextField(blank=True, null=True)),
                ('share_compensation_upper_limit', models.TextField(blank=True, null=True)),
                ('in_target_company_compensation_according_to_proportion_flag', models.BooleanField(default=False)),
                ('in_proportion_to_shareholding_in_listed_companies_flag', models.BooleanField(default=False)),
                ('compensation_compensation_in_other_proportions', models.TextField(blank=True, null=True)),
                ('joint_several_compensation_flag', models.BooleanField(default=False)),
                ('supplementary_compensation_flag', models.BooleanField(default=False)),
                ('share_quantity_calculating_method_should_be_compensated', models.TextField(blank=True, null=True)),
                ('share_quantity_adjustment_should_be_compensated', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'operational_cash_flow_contract_amount_share_compensation',
            },
        ),
        migrations.CreateModel(
            name='payment_arrangements',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_body', models.TextField(blank=True, null=True)),
                ('reward_object_name', models.TextField(blank=True, null=True)),
                ('reward_object_identity', models.TextField(blank=True, null=True)),
                ('one_time_payment_flag', models.BooleanField(default=False)),
                ('installment_payment_flag', models.BooleanField(default=False)),
                ('installment_payment_arrangement', models.TextField(blank=True, null=True)),
                ('cash_payment_flag', models.BooleanField(default=False)),
                ('other_payments', models.TextField(blank=True, null=True)),
                ('payment_time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_arrangements',
            },
        ),
        migrations.CreateModel(
            name='payment_bonds_compulsory_equity_swap',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('mandatory_equity_swap_conditions', models.TextField(blank=True, null=True)),
                ('compulsory_share_conversion_procedure', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_bonds_compulsory_equity_swap',
            },
        ),
        migrations.CreateModel(
            name='payment_bonds_conversion_price_upward_modification',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('upward_revision_period', models.TextField(blank=True, null=True)),
                ('price_conditions_upward_modification', models.TextField(blank=True, null=True)),
                ('conversion_price_before_upward_amendment', models.TextField(blank=True, null=True)),
                ('upward_modified_price_interval', models.TextField(blank=True, null=True)),
                ('upward_modified_conversion_price', models.TextField(blank=True, null=True)),
                ('upward_revision_times', models.TextField(blank=True, null=True)),
                ('price_scope_upward_modification', models.TextField(blank=True, null=True)),
                ('upward_revision_procedure', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_bonds_conversion_price_upward_modification',
            },
        ),
        migrations.CreateModel(
            name='payment_bonds_convertible_price_downward_revision',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('downward_revision_period', models.TextField(blank=True, null=True)),
                ('price_conditions_downward_revision', models.TextField(blank=True, null=True)),
                ('conversion_price_before_downward_amendment', models.TextField(blank=True, null=True)),
                ('downward_modified_price_interval', models.TextField(blank=True, null=True)),
                ('downward_modified_conversion_price', models.TextField(blank=True, null=True)),
                ('downward_revisions_number', models.TextField(blank=True, null=True)),
                ('price_scope_downward_modification', models.TextField(blank=True, null=True)),
                ('downward_revision_procedure', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_bonds_convertible_price_downward_revision',
            },
        ),
        migrations.CreateModel(
            name='payment_bonds_early_resale',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('pre_sale_conditions', models.TextField(blank=True, null=True)),
                ('pre_sale_method', models.TextField(blank=True, null=True)),
                ('exercise_period', models.TextField(blank=True, null=True)),
                ('interest_on_unsold_part_calculation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_bonds_early_resale',
            },
        ),
        migrations.CreateModel(
            name='payment_cash_payment',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('counterparty_name', models.TextField(blank=True, null=True)),
                ('counterparty_identity', models.TextField(blank=True, null=True)),
                ('cash_payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('first_stage_payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('first_payment_period', models.TextField(blank=True, null=True)),
                ('payment_in_second_instalment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_payment_period', models.TextField(blank=True, null=True)),
                ('payment_in_third_instalment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_payment_period', models.TextField(blank=True, null=True)),
                ('one_time_cash_payment_time', models.TextField(blank=True, null=True)),
                ('compensation_or_amount_of_compensation_deduction_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'payment_cash_payment',
            },
        ),
        migrations.CreateModel(
            name='payment_directional_convertible_bonds_issuance',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('issue_object', models.TextField(blank=True, null=True)),
                ('issuer_identity', models.TextField(blank=True, null=True)),
                ('target_companystock_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('bonds_payment_consideration_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('issue_quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('bonds_convertible_quantity_at_initial_conversion_price', models.TextField(blank=True, null=True)),
                ('issuing_mode', models.TextField(blank=True, null=True)),
                ('bond_maturity', models.TextField(blank=True, null=True)),
                ('stock_transfer_period', models.TextField(blank=True, null=True)),
                ('bond_interest_rate', models.TextField(blank=True, null=True)),
                ('interest_bearing_method', models.TextField(blank=True, null=True)),
                ('setting_up_guarantee_flag', models.BooleanField(default=False)),
                ('conversion_price', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_directional_convertible_bonds_issuance',
            },
        ),
        migrations.CreateModel(
            name='payment_issue_share',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('issue_object', models.TextField(blank=True, null=True)),
                ('issuer_identity', models.TextField(blank=True, null=True)),
                ('transaction_amount_purchased_by_issuing_share', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('issue_quantity', models.TextField(blank=True, null=True)),
                ('pricing_date', models.TextField(blank=True, null=True)),
                ('issue_price', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
            ],
            options={
                'db_table': 'payment_issue_share',
            },
        ),
        migrations.CreateModel(
            name='payment_issue_share_share_price_adjustment',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('trigger_condition_type', models.TextField(blank=True, null=True)),
                ('trigger_condition_content', models.TextField(blank=True, null=True)),
                ('price_adjustment_date', models.TextField(blank=True, null=True)),
                ('adjustable_price_period', models.TextField(blank=True, null=True)),
                ('price_adjustment_mechanism', models.TextField(blank=True, null=True)),
                ('pre_adjustment_issue_price', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('adjusted_issue_price', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
            ],
            options={
                'db_table': 'payment_issue_share_share_price_adjustment',
            },
        ),
        migrations.CreateModel(
            name='pdf_information',
            fields=[
                ('pdf_id', models.TextField(primary_key=True, serialize=False)),
                ('create_time', models.DateField(blank=True, null=True)),
                ('simple_name', models.TextField()),
                ('full_name', models.TextField()),
            ],
            options={
                'db_table': 'pdf_information',
            },
        ),
        migrations.CreateModel(
            name='performance_commitment_arrangement',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('performance_commitment_arrangement_committed_person', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('shareholding_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
            ],
            options={
                'db_table': 'performance_commitment_arrangement',
            },
        ),
        migrations.CreateModel(
            name='performance_commitment_arrangement_commitment_period',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('committed_person', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('three_years_flag', models.BooleanField(default=False)),
                ('four_years_flag', models.BooleanField(default=False)),
                ('specific_year', models.TextField(blank=True, null=True)),
                ('duration_extension_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'performance_commitment_arrangement_commitment_period',
            },
        ),
        migrations.CreateModel(
            name='performance_commitment_arrangement_committed_performance',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('committed_person', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('commitment_to_net_profit_flag', models.BooleanField(default=False)),
                ('commitment_to_net_operating_cash_flow', models.TextField(blank=True, null=True)),
                ('commitment_to_sign_contract_amount', models.TextField(blank=True, null=True)),
                ('committed_inventory_flag', models.BooleanField(default=False)),
                ('commitment_to_accounts_receivable_flag', models.BooleanField(default=False)),
                ('commitment_to_long_term_receivables_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'performance_commitment_arrangement_committed_performance',
            },
        ),
        migrations.CreateModel(
            name='performance_commitment_completion',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('committed_person', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('stock_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('year', models.TextField(blank=True, null=True)),
                ('actual_performance_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('performance_commitment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('difference', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('completion_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
            ],
            options={
                'db_table': 'performance_commitment_completion',
            },
        ),
        migrations.CreateModel(
            name='performance_commitment_to_accounts_receivable_recovery_rate',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('first_year_commitment_receivables_recovery_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('second_year_commitment_receivables_recovery_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_commitment_receivables_recovery_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fourth_year_commitment_receivables_recovery_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'performance_commitment_to_accounts_receivable_recovery_rate',
            },
        ),
        migrations.CreateModel(
            name='performance_commitment_to_accounts_receivable_turnover_rate',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('first_year_commitment_receivables_turnover_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('second_year_commitment_receivable_turnover_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_commitment_receivable_turnover_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fourth_year_commitment_receivable_turnover_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'performance_commitment_to_accounts_receivable_turnover_rate',
            },
        ),
        migrations.CreateModel(
            name='performance_commitment_to_long_term_receivables_recovery_rate',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('first_year_commitment_long_term_recovery_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('second_year_commitment_long_term_recovery_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_commitment_long_term_recovery_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fourth_year_commitment_long_term_recovery_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'performance_commitment_to_long_term_receivables_recovery_rate',
            },
        ),
        migrations.CreateModel(
            name='performance_commitment_to_long_term_receivables_turnover_rate',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('first_year_commit_long_term_turnover_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('second_year_commit_long_term_turnover_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_commit_long_term_turnover_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fourth_year_commit_long_term_turnover_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('actual_performance_audit', models.TextField(blank=True, null=True)),
                ('how_to_determine_accounting_firms', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'performance_commitment_to_long_term_receivables_turnover_rate',
            },
        ),
        migrations.CreateModel(
            name='performance_forecast_compensation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('stock_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('compensation_period', models.TextField(blank=True, null=True)),
                ('compensation_obligation_triggering_conditions', models.TextField(blank=True, null=True)),
                ('compensation_amount', models.TextField(blank=True, null=True)),
                ('compensation_mode', models.TextField(blank=True, null=True)),
                ('exemption_from_obligation_to_compensate', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'performance_forecast_compensation',
            },
        ),
        migrations.CreateModel(
            name='performance_forecast_compensation_compensation_amount',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('balance_compensation_flag', models.BooleanField(default=False)),
                ('premium_compensation_flag', models.BooleanField(default=False)),
                ('commitment_indicators_types', models.TextField(blank=True, null=True)),
                ('compensation_calculation_formula', models.TextField(blank=True, null=True)),
                ('compensation_upper_limit', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'performance_forecast_compensation_compensation_amount',
            },
        ),
        migrations.CreateModel(
            name='performance_forecast_compensation_compensation_implementation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('commitment_to_net_profit_flag', models.BooleanField(default=False)),
                ('commitment_to_net_operating_cash_flow_flag', models.BooleanField(default=False)),
                ('commitment_to_sign_contract_amount_flag', models.BooleanField(default=False)),
                ('commitment_to_accounts_receivable_flag', models.BooleanField(default=False)),
                ('committed_inventory_flag', models.BooleanField(default=False)),
                ('commitment_to_long_term_receivables_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'performance_forecast_compensation_compensation_implementation',
            },
        ),
        migrations.CreateModel(
            name='performance_forecast_compensation_compensation_period',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('each_year_performance_commitment_period_flag', models.BooleanField(default=False)),
                ('performance_commitment_year_flag', models.BooleanField(default=False)),
                ('after_cumulative_performance_commitment_period_expires_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'performance_forecast_compensation_compensation_period',
            },
        ),
        migrations.CreateModel(
            name='performance_forecast_compensation_guarantee',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('guarantee', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('guarantee_mode_share_pledge_guarantee_flag', models.BooleanField(default=False)),
                ('guarantee_mode_margin_guarantee_flag', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'performance_forecast_compensation_guarantee',
            },
        ),
        migrations.CreateModel(
            name='performance_forecast_guarantee_guarantee_mode_margin_guarantee',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('guarantor', models.TextField(blank=True, null=True)),
                ('margin_guarantee_object', models.TextField(blank=True, null=True)),
                ('margin_payment_method_cash', models.TextField(blank=True, null=True)),
                ('margin_payment_method_share_pledge', models.TextField(blank=True, null=True)),
                ('margin_calculation_method_cash', models.TextField(blank=True, null=True)),
                ('margin_calculation_method_share_pledge', models.TextField(blank=True, null=True)),
                ('margin_account_management', models.TextField(blank=True, null=True)),
                ('guaranty_period', models.TextField(blank=True, null=True)),
                ('profit_distribution_during_guarantee_period', models.TextField(blank=True, null=True)),
                ('margin_return_restitution_conditions', models.TextField(blank=True, null=True)),
                ('margin_return_restitution_amount', models.TextField(blank=True, null=True)),
                ('margin_return_restitution_procedures', models.TextField(blank=True, null=True)),
                ('margin_return_return_amount_adjustment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'performance_forecast_guarantee_guarantee_mode_margin_guarantee',
            },
        ),
        migrations.CreateModel(
            name='profit_operational_cash_flow_contract_amount_cash_compensation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('cash_compensation_trigger_conditions', models.TextField(blank=True, null=True)),
                ('cash_compensation_ceiling', models.TextField(blank=True, null=True)),
                ('in_target_company_compensation_according_to_proportion_flag', models.BooleanField(default=False)),
                ('in_proportion_to_shareholding_in_listed_companies_flag', models.BooleanField(default=False)),
                ('compensation_compensation_in_other_proportions', models.TextField(blank=True, null=True)),
                ('joint_several_compensation_flag', models.BooleanField(default=False)),
                ('supplementary_compensation_flag', models.BooleanField(default=False)),
                ('calculating_amount_of_compensable_cash_method', models.TextField(blank=True, null=True)),
                ('compensable_cash_amount_adjustment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'profit_operational_cash_flow_contract_amount_cash_compensation',
            },
        ),
        migrations.CreateModel(
            name='residual_stocks_in_underlying_assets_arrangement',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('shareholder_holding_underlying_assets_remaining_stock', models.TextField(blank=True, null=True)),
                ('shareholding_quantity', models.TextField(blank=True, null=True)),
                ('shareholding_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('residual_stock_follow_up_arrangement', models.TextField(blank=True, null=True)),
                ('remaining_stock_acquisition_time_arrangement', models.TextField(blank=True, null=True)),
                ('transaction_pricing', models.TextField(blank=True, null=True)),
                ('payment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'residual_stocks_in_underlying_assets_arrangement',
            },
        ),
        migrations.CreateModel(
            name='reward_amount',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount_upper_limit', models.TextField(blank=True, null=True)),
                ('cumulative_calculation_flag', models.BooleanField(default=False)),
                ('cumulative_calculation_formula', models.TextField(blank=True, null=True)),
                ('stage_calculation_flag', models.BooleanField(default=False)),
                ('phase_i_calculation_formula', models.TextField(blank=True, null=True)),
                ('phase_ii_calculation_formula', models.TextField(blank=True, null=True)),
                ('phase_iii_calculation_formula', models.TextField(blank=True, null=True)),
                ('not_calculated_according_to_excess_range_flag', models.BooleanField(default=False)),
                ('do_not_calculate_formula_according_to_excess_range_flag', models.BooleanField(default=False)),
                ('calculated_by_excess_range_in_segments_flag', models.BooleanField(default=False)),
                ('paragraph_one_excess_range', models.TextField(blank=True, null=True)),
                ('paragraph_one_incentive_amount', models.TextField(blank=True, null=True)),
                ('paragraph_two_excess_range', models.TextField(blank=True, null=True)),
                ('paragraph_two_incentive_amount', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'reward_amount',
            },
        ),
        migrations.CreateModel(
            name='reward_period',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('earnings_commitment_period_flag', models.BooleanField(default=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('fourth_years', models.TextField(blank=True, null=True)),
                ('fifth_years', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'reward_period',
            },
        ),
        migrations.CreateModel(
            name='share_lock_in_period',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('share_locks_subject', models.TextField(blank=True, null=True)),
                ('identity', models.TextField(blank=True, null=True)),
                ('share_lock_in_period', models.TextField(blank=True, null=True)),
                ('new_transferable_share_number_during_lock_in_period', models.TextField(blank=True, null=True)),
                ('new_transferable_share_in_lock_in_period_proportion', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('prolonged_locking_period', models.TextField(blank=True, null=True)),
                ('share_deduction_with_compensation_obligation_flag', models.BooleanField(default=False)),
                ('new_share_listing_time', models.TextField(blank=True, null=True)),
                ('limited_shareto_sale_circulation_time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'share_lock_in_period',
            },
        ),
        migrations.CreateModel(
            name='special_account_special_funs_outbound_proportional_limitation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_year', models.TextField(blank=True, null=True)),
                ('first_year_transfer_ratio_limit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('second_years', models.TextField(blank=True, null=True)),
                ('transfer_proportion_limitation_in_second_year', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('third_year', models.TextField(blank=True, null=True)),
                ('third_year_transfer_ratio_limit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
            ],
            options={
                'db_table': 'special_account_special_funs_outbound_proportional_limitation',
            },
        ),
        migrations.CreateModel(
            name='stock_purchase_arrangement_in_secondary_market_after_payment',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('buying_body', models.TextField(blank=True, null=True)),
                ('purchaser_identity', models.TextField(blank=True, null=True)),
                ('buying_time', models.TextField(blank=True, null=True)),
                ('purchase_amount', models.TextField(blank=True, null=True)),
                ('purchasing_ways', models.TextField(blank=True, null=True)),
                ('purchase_share_lock_in_period_arrangement', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'stock_purchase_arrangement_in_secondary_market_after_payment',
            },
        ),
        migrations.CreateModel(
            name='target_company_package',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('pdf_id', models.TextField()),
                ('create_time', models.DateField(blank=True, null=True)),
                ('module_name', models.TextField()),
                ('package_name', models.TextField()),
                ('company_id_list', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
            ],
            options={
                'db_table': 'target_company_package',
            },
        ),
        migrations.CreateModel(
            name='target_company_used_in_package',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('module_name', models.TextField()),
                ('used_flag', models.BooleanField(default=False)),
                ('company', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.basic_plan_essential_information')),
                ('pdf', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information')),
            ],
            options={
                'db_table': 'target_company_used_in_package',
            },
        ),
        migrations.CreateModel(
            name='testing_compensation_arrangement_compensation_amount',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('compensatory_obligor', models.TextField(blank=True, null=True)),
                ('compensatory_obligor_status', models.TextField(blank=True, null=True)),
                ('compensation_amount_calculation_formula', models.TextField(blank=True, null=True)),
                ('compensation_amount_upper_limit', models.TextField(blank=True, null=True)),
                ('company_package', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package')),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information')),
            ],
            options={
                'db_table': 'testing_compensation_arrangement_compensation_amount',
            },
        ),
        migrations.CreateModel(
            name='to_net_profit_contract_amount_amount_cash_compensation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('direct_cash_payment_flag', models.BooleanField(default=False)),
                ('cash_compensation_special_account_flag', models.BooleanField(default=False)),
                ('company_package', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package')),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information')),
            ],
            options={
                'db_table': 'to_net_profit_contract_amount_amount_cash_compensation',
            },
        ),
        migrations.CreateModel(
            name='to_net_profit_contract_amount_amount_share_compensation',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('share_repurchase_cancellation_flag', models.BooleanField(default=False)),
                ('charge_share_transfer_free_flag', models.BooleanField(default=False)),
                ('share_presentation_flag', models.BooleanField(default=False)),
                ('company_package', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package')),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information')),
            ],
            options={
                'db_table': 'to_net_profit_contract_amount_amount_share_compensation',
            },
        ),
        migrations.CreateModel(
            name='trading_pe',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('year_before_declaration_static_pe_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('annual_declaration', models.TextField(blank=True, null=True)),
                ('declare_current_year_dynamic_pe_ratio', models.TextField(blank=True, null=True)),
                ('year_two_after_declaration', models.TextField(blank=True, null=True)),
                ('dynamic_pe_ratio_in_second_year_after_declaration', models.TextField(blank=True, null=True)),
                ('year_three_after_declaration', models.TextField(blank=True, null=True)),
                ('dynamic_pe_ratio_in_third_year_after_declaration', models.TextField(blank=True, null=True)),
                ('fourth_year_after_declaration', models.TextField(blank=True, null=True)),
                ('dynamic_pe_ratio_in_fourth_year_after_declaration', models.TextField(blank=True, null=True)),
                ('company_package', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package')),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information')),
            ],
            options={
                'db_table': 'trading_pe',
            },
        ),
        migrations.CreateModel(
            name='trigger_condition',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('performance_commitment_completed_in_each_year_flag', models.BooleanField(default=False)),
                ('accumulated_net_profit_excess_flag', models.BooleanField(default=False)),
                ('accumulated_net_profit_excess_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('operating_cash_flow_net_excess_flag', models.BooleanField(default=False)),
                ('operating_cash_flow_net_excess_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('contract_signed_excess_amount_flag', models.BooleanField(default=False)),
                ('contract_amount_excess_proportion', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('company_package', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package')),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information')),
            ],
            options={
                'db_table': 'trigger_condition',
            },
        ),
        migrations.CreateModel(
            name='underlying_assets_financial_data',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('reporting_period_first_year', models.TextField(blank=True, null=True)),
                ('first_year_reporting_period_audited_net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('reporting_period_second_year', models.TextField(blank=True, null=True)),
                ('year_underlying_assets_reporting_period_audited_net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('reporting_period_period_i', models.TextField(blank=True, null=True)),
                ('understanding_assets_reporting_period_audited_net_profit', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('annual_declaration', models.TextField(blank=True, null=True)),
                ('year_underlying_assets_declare_performance_commitment', models.TextField(blank=True, null=True)),
                ('audited_in_year_before_it_was_declared_performance_commitment', models.TextField(blank=True, null=True)),
                ('first_year_after_declaration', models.TextField(blank=True, null=True)),
                ('performance_commitment_number_in_first_year_after_declaration', models.TextField(blank=True, null=True)),
                ('actually_achieved_in_first_year_after_declaration_number', models.TextField(blank=True, null=True)),
                ('to_commitment_in_first_year_after_declaration_proportion', models.TextField(blank=True, null=True)),
                ('year_two_after_declaration', models.TextField(blank=True, null=True)),
                ('performance_commitment_number_in_second_year_after_declaration', models.TextField(blank=True, null=True)),
                ('actual_achievements_in_second_year_after_declaration', models.TextField(blank=True, null=True)),
                ('to_commitment_in_second_year_after_declaration_ratio', models.TextField(blank=True, null=True)),
                ('year_three_after_declaration', models.TextField(blank=True, null=True)),
                ('annual_performance_commitment_in_third_year_after_declaration', models.TextField(blank=True, null=True)),
                ('actual_achievements_in_third_year_after_declaration', models.TextField(blank=True, null=True)),
                ('to_commitment_in_third_year_after_declaration_ratio', models.TextField(blank=True, null=True)),
                ('fourth_year_after_declaration', models.TextField(blank=True, null=True)),
                ('annual_performance_commitment_in_fourth_year_after_declaration', models.TextField(blank=True, null=True)),
                ('actual_achievements_in_fourth_year_after_declaration', models.TextField(blank=True, null=True)),
                ('to_commitment_in_fourth_year_after_declaration_proportion', models.TextField(blank=True, null=True)),
                ('company_package', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package')),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information')),
            ],
            options={
                'db_table': 'underlying_assets_financial_data',
            },
        ),
        migrations.CreateModel(
            name='underlying_assets_transaction_price_adjustment',
            fields=[
                ('row_id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_object', models.TextField(blank=True, null=True)),
                ('payment_object_identity', models.TextField(blank=True, null=True)),
                ('trigger_condition', models.TextField(blank=True, null=True)),
                ('underlying_assets_before_adjustment_price', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('adjusted_underlying_assets_transaction_price', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('adjusted_underlying_assets_transaction_price_increase', models.DecimalField(blank=True, decimal_places=2, max_digits=25, null=True)),
                ('adjusted_trading_price_determination_time', models.TextField(blank=True, null=True)),
                ('adjusted_transaction_amount_payment_time', models.TextField(blank=True, null=True)),
                ('cash_payment_amount', models.TextField(blank=True, null=True)),
                ('share_payment_amount', models.TextField(blank=True, null=True)),
                ('company_package', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package')),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information')),
            ],
            options={
                'db_table': 'underlying_assets_transaction_price_adjustment',
            },
        ),
        migrations.AddField(
            model_name='stock_purchase_arrangement_in_secondary_market_after_payment',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='stock_purchase_arrangement_in_secondary_market_after_payment',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='special_account_special_funs_outbound_proportional_limitation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='special_account_special_funs_outbound_proportional_limitation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='share_lock_in_period',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='share_lock_in_period',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='reward_period',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='reward_period',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='reward_amount',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='reward_amount',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='residual_stocks_in_underlying_assets_arrangement',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='residual_stocks_in_underlying_assets_arrangement',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='profit_operational_cash_flow_contract_amount_cash_compensation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='profit_operational_cash_flow_contract_amount_cash_compensation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_forecast_guarantee_guarantee_mode_margin_guarantee',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_forecast_guarantee_guarantee_mode_margin_guarantee',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation_guarantee',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation_guarantee',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation_compensation_period',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation_compensation_period',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation_compensation_implementation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation_compensation_implementation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation_compensation_amount',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation_compensation_amount',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_forecast_compensation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_commitment_to_long_term_receivables_turnover_rate',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_commitment_to_long_term_receivables_turnover_rate',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_commitment_to_long_term_receivables_recovery_rate',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_commitment_to_long_term_receivables_recovery_rate',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_commitment_to_accounts_receivable_turnover_rate',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_commitment_to_accounts_receivable_turnover_rate',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_commitment_to_accounts_receivable_recovery_rate',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_commitment_to_accounts_receivable_recovery_rate',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_commitment_completion',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_commitment_completion',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_commitment_arrangement_committed_performance',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_commitment_arrangement_committed_performance',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_commitment_arrangement_commitment_period',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_commitment_arrangement_commitment_period',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='performance_commitment_arrangement',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='performance_commitment_arrangement',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_issue_share_share_price_adjustment',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_issue_share_share_price_adjustment',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_issue_share',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_issue_share',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_directional_convertible_bonds_issuance',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_directional_convertible_bonds_issuance',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_cash_payment',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_cash_payment',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_bonds_early_resale',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_bonds_early_resale',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_bonds_convertible_price_downward_revision',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_bonds_convertible_price_downward_revision',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_bonds_conversion_price_upward_modification',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_bonds_conversion_price_upward_modification',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_bonds_compulsory_equity_swap',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_bonds_compulsory_equity_swap',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='payment_arrangements',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='payment_arrangements',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='operational_cash_flow_contract_amount_share_compensation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='operational_cash_flow_contract_amount_share_compensation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='mode_impairment_compensation_share_quantity_adjustment',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='mode_impairment_compensation_share_quantity_adjustment',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='issuing_share_raising_matching_funds_basic_situation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='issuing_share_raising_matching_funds_basic_situation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='integration_labor_relations',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='integration_labor_relations',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='integration_fiscal_taxation_arrangements',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='integration_fiscal_taxation_arrangements',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='integration_financing_support',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='integration_financing_support',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='implementation_long_term_receivables_cash_compensation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='implementation_long_term_receivables_cash_compensation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='implementation_committed_inventory_cash_compensation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='implementation_committed_inventory_cash_compensation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='implementation_accounts_receivable_cash_compensation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='implementation_accounts_receivable_cash_compensation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='impairment_testing_compensation_arrangement_compensation_mode',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='impairment_testing_compensation_arrangement_compensation_mode',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='impairment_test_time',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='impairment_test_time',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='impairment_test_flow',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='impairment_test_flow',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='impairment_test_compensation_conditions',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='impairment_test_compensation_conditions',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='forecast_guarantee_guarantee_mode_share_pledge_guarantee',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='forecast_guarantee_guarantee_mode_share_pledge_guarantee',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='forecast_compensation_compensation_mode_long_term_receivables',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='forecast_compensation_compensation_mode_long_term_receivables',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='forecast_compensation_compensation_mode_committed_inventory',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='forecast_compensation_compensation_mode_committed_inventory',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='forecast_compensation_compensation_mode_accounts_receivable',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='forecast_compensation_compensation_mode_accounts_receivable',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='compensation_mode_share_compensation_implementation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='compensation_mode_share_compensation_implementation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='compensation_implementation_cash_compensation_special_account',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='compensation_implementation_cash_compensation_special_account',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='committed_performance_committed_inventory_turnover_rate',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='committed_performance_committed_inventory_turnover_rate',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='committed_performance_committed_inventory_recovery_rate',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='committed_performance_committed_inventory_recovery_rate',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='committed_performance_commitment_to_sign_contract_amount',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='committed_performance_commitment_to_sign_contract_amount',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='committed_performance_commitment_to_net_operating_cash_flow',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='committed_performance_commitment_to_net_operating_cash_flow',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='committed_performance_commitment_to_long_term_receivables',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='committed_performance_commitment_to_long_term_receivables',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='committed_performance_commitment_to_accounts_receivable',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='committed_performance_commitment_to_accounts_receivable',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='commitment_net_profit_operational_cash_flow_contract_amount',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='commitment_net_profit_operational_cash_flow_contract_amount',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='cash_payment_earnest_money',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='cash_payment_earnest_money',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='breach_contract_liability',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='breach_contract_liability',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_transition_arrangement',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_transition_arrangement',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_transaction_type',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_transaction_type',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_payment',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_payment',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_integration_corporate_governance_arrangements',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_integration_corporate_governance_arrangements',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_essential_information',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_essential_information',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_contingent_liability',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_contingent_liability',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_assets_delivery_limited_company_unlisted_companies',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_assets_delivery_limited_company_unlisted_companies',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_assets_delivery_limited_company_listed_companies',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_assets_delivery_limited_company_listed_companies',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='basic_plan_assets_delivery_limited_company',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='basic_plan_assets_delivery_limited_company',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='assets_appraisal_basic_data',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='assets_appraisal_basic_data',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='assessment_index',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='assessment_index',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='arrangement_compensation_mode_cash_compensation_implementation',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='arrangement_compensation_mode_cash_compensation_implementation',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='arrangement_committed_performance_committed_inventory',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='arrangement_committed_performance_committed_inventory',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='arrangement_committed_performance_commitment_to_net_profit',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='arrangement_committed_performance_commitment_to_net_profit',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='arrangement_commitment_performance_computing_criteria',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='arrangement_commitment_performance_computing_criteria',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
        migrations.AddField(
            model_name='accounting_treatment',
            name='company_package',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.target_company_package'),
        ),
        migrations.AddField(
            model_name='accounting_treatment',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DataEntrySystem.pdf_information'),
        ),
    ]
